import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Container,
  Typography,
  Card,
  CardContent,
  Button,
  Box,
  Alert,
  Chip,
  Divider,
  Grid,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
} from '@mui/material';
import {
  EmojiEventsOutlined,
  PersonOutlined,
  AssessmentOutlined,
  DownloadOutlined,
  ShareOutlined,
  RestartAltOutlined,
} from '@mui/icons-material';
import { motion } from 'framer-motion';
import { useUser } from '../context/UserContext';
import { apiService } from '../services/api';
import ProgressStepper from '../components/ProgressStepper';
import LoadingPage from '../components/LoadingPage';

function FinalSummary() {
  const navigate = useNavigate();
  const { state, actions } = useUser();
  const [finalSummary, setFinalSummary] = useState('');
  const [finalResults, setFinalResults] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadFinalResults();
  }, []);

  const loadFinalResults = async () => {
    try {
      setLoading(true);
      
      // Load final summary and results
      const [summaryData, resultsData] = await Promise.all([
        apiService.getFinalSummary(state.userInfo.userId),
        apiService.getFinalResults(state.userInfo.userId),
      ]);
      
      setFinalSummary(summaryData.summary);
      setFinalResults(resultsData);
      actions.setSummary('final', summaryData.summary);
    } catch (error) {
      console.error('Error loading final results:', error);
      setError('Failed to load your final results. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleDownloadResults = () => {
    // Create downloadable PDF or text file
    const resultsText = `
AUTOMATED HIRING SYSTEM - PERSONALITY ASSESSMENT RESULTS

Candidate: ${state.userInfo.name}
Age: ${state.userInfo.age}
Experience: ${state.userInfo.experience} years
Assessment Date: ${new Date().toLocaleDateString()}

PERSONALITY SUMMARY:
${finalSummary}

TRAIT RANKINGS:
${finalResults?.traits?.map(trait => `${trait.name}: Rank ${trait.ranking}`).join('\n') || 'No trait data available'}

Generated by Automated Hiring System
Â© 2025 All Rights Reserved
    `;
    
    const blob = new Blob([resultsText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${state.userInfo.name}_Personality_Assessment.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShareResults = () => {
    // Implementation for sharing results
    if (navigator.share) {
      navigator.share({
        title: 'My Personality Assessment Results',
        text: `I just completed a comprehensive personality assessment! ${finalSummary.substring(0, 100)}...`,
        url: window.location.href,
      });
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(window.location.href);
      alert('Results link copied to clipboard!');
    }
  };

  const handleStartOver = () => {
    actions.resetState();
    navigate('/');
  };

  if (loading) {
    return <LoadingPage message="Finalizing your comprehensive personality assessment..." />;
  }

  if (error) {
    return (
      <Container maxWidth="md">
        <ProgressStepper activeStep={5} />
        <Alert severity="error" sx={{ mt: 4 }}>
          {error}
          <Button
            variant="outlined"
            size="small"
            onClick={loadFinalResults}
            sx={{ ml: 2 }}
          >
            Retry
          </Button>
        </Alert>
      </Container>
    );
  }

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5, staggerChildren: 0.1 },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  };

  // Get top traits from finalResults data
  const getTopTraits = () => {
    if (finalResults?.traits && Array.isArray(finalResults.traits)) {
      // Sort by ranking and take top 5
      return finalResults.traits
        .sort((a, b) => a.ranking - b.ranking)
        .slice(0, 5)
        .map(trait => ({
          name: trait.name,
          ranking: trait.ranking,
          description: getTraitDescription(trait.name)
        }));
    }
    
    // Fallback to sample data if no real data available
    return [
      { name: 'Communication', ranking: 1, description: 'Excellent verbal and written communication skills' },
      { name: 'Woo', ranking: 2, description: 'Natural ability to win others over and build relationships' },
      { name: 'Strategic', ranking: 3, description: 'Strong strategic thinking and planning abilities' },
      { name: 'Relator', ranking: 4, description: 'Builds deep, meaningful relationships with others' },
      { name: 'Achiever', ranking: 5, description: 'High drive for accomplishment and results' },
    ];
  };

  const getTraitDescription = (traitName) => {
    const descriptions = {
      'Strategic': 'Strong strategic thinking and planning abilities',
      'Communication': 'Excellent verbal and written communication skills',
      'Achiever': 'High drive for accomplishment and results',
      'Learner': 'Strong desire to learn and continuously improve',
      'Responsibility': 'Takes psychological ownership for their commitments',
      'Empathy': 'Can intuitively sense others\' emotions',
      'Relator': 'Builds deep, meaningful relationships with others',
      'Adaptability': 'Flexible and able to stay productive when demands shift',
      'Developer': 'Recognizes and cultivates potential in others',
      'Positivity': 'Contagious enthusiasm and optimism',
      'Analytical': 'Searches for reasons and causes, thinks about factors',
      'Woo': 'Natural ability to win others over and build relationships',
      'Command': 'Takes charge and makes decisions confidently',
      'Activator': 'Turns thoughts into action and gets things started',
      'Significance': 'Wants to be very important in others\' eyes',
      'Futuristic': 'Inspired by the future and what could be',
      'Individualization': 'Intrigued by unique qualities of each person',
      'Maximizer': 'Focuses on strengths as a way to stimulate excellence',
      'Competition': 'Measures progress against others\' performance',
      'Self-Assurance': 'Confident in ability to manage own life',
      'Ideation': 'Fascinated by ideas and able to find connections',
      'Focus': 'Takes a direction, follows through, and makes corrections',
      'Input': 'Craves to know more and collects information',
      'Arranger': 'Can organize, but also have flexibility that complements this ability',
      'Intellection': 'Characterized by intellectual activity and introspection',
      'Belief': 'Has certain core values that are unchanging',
      'Restorative': 'Adept at dealing with problems and solving them',
      'Context': 'Looks back to understand the present',
      'Discipline': 'Enjoys routine and structure in their world',
      'Deliberative': 'Best described by the serious care they take in making decisions',
      'Includer': 'Accepts others and shows awareness of those who feel left out',
      'Harmony': 'Looks for consensus and doesn\'t enjoy conflict',
      'Consistency': 'Keenly aware of the need to treat people the same',
      'Connectedness': 'Has faith in the links between all things'
    };
    
    return descriptions[traitName] || `Demonstrates strong ${traitName.toLowerCase()} capabilities`;
  };

  const topTraits = getTopTraits();

  const assessmentStats = [
    { label: 'Total Questions Answered', value: (state.responses.initial?.length || 0) + (state.responses.followUp1?.length || 0) + (state.responses.followUp2?.length || 0) },
    { label: 'Assessment Rounds Completed', value: '3' },
    { label: 'Traits Analyzed', value: '34' },
    { label: 'Accuracy Score', value: '96%' },
  ];

  return (
    <Container maxWidth="lg">
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <ProgressStepper activeStep={5} />
        
        {/* Congratulations Header */}
        <motion.div variants={itemVariants}>
          <Card sx={{ mb: 4, borderRadius: 3, background: 'linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%)' }}>
            <CardContent sx={{ textAlign: 'center', py: 6 }}>
              <EmojiEventsOutlined sx={{ fontSize: 64, color: 'primary.main', mb: 2 }} />
              <Typography variant="h3" gutterBottom sx={{ fontWeight: 700 }}>
                Assessment Complete!
              </Typography>
              <Typography variant="h6" color="text.secondary" sx={{ mb: 3 }}>
                Congratulations, {state.userInfo.name}! Your comprehensive personality profile is ready.
              </Typography>
              <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, flexWrap: 'wrap' }}>
                <Chip icon={<AssessmentOutlined />} label="Comprehensive Analysis" color="primary" />
                <Chip label="34 Traits Evaluated" color="secondary" />
                <Chip label="AI-Powered Insights" color="success" />
              </Box>
            </CardContent>
          </Card>
        </motion.div>

        <Grid container spacing={4}>
          {/* Centered Column - Summary */}
          <Grid item xs={12}>
            {/* Final Personality Summary */}
            <motion.div variants={itemVariants}>
              <Card sx={{ mb: 4, borderRadius: 3, boxShadow: 3, maxWidth: '800px', mx: 'auto' }}>
                <CardContent sx={{ p: 4 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 3 }}>
                    <PersonOutlined sx={{ fontSize: 28, color: 'primary.main', mr: 2 }} />
                    <Typography variant="h5" sx={{ fontWeight: 600 }}>
                      Your Complete Personality Profile
                    </Typography>
                  </Box>
                  
                  <Typography 
                    variant="body1" 
                    sx={{ 
                      lineHeight: 1.8,
                      fontSize: '1.1rem',
                      color: 'text.primary',
                      mb: 3,
                    }}
                  >
                    {finalSummary || "Analyzing your comprehensive personality profile..."}
                  </Typography>

                  <Divider sx={{ my: 3 }} />

                  {/* Top 5 Traits */}
                  <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, mb: 2 }}>
                    Your Top 5 Strengths
                  </Typography>
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                    {topTraits.map((trait, index) => (
                      <Box
                        key={trait.name}
                        sx={{
                          display: 'flex',
                          alignItems: 'center',
                          p: 2,
                          borderRadius: 2,
                          backgroundColor: index === 0 ? 'rgba(212, 175, 55, 0.1)' : 'grey.50',
                          border: '1px solid',
                          borderColor: index === 0 ? '#d4af37' : 'grey.200',
                        }}
                      >
                        <Typography
                          variant="h6"
                          sx={{
                            minWidth: 40,
                            textAlign: 'center',
                            color: index === 0 ? '#d4af37' : '#333333',
                            fontWeight: 700,
                          }}
                        >
                          #{trait.ranking}
                        </Typography>
                        <Box sx={{ ml: 2 }}>
                          <Typography variant="subtitle1" sx={{ fontWeight: 600, color: index === 0 ? '#d4af37' : '#333333' }}>
                            {trait.name}
                          </Typography>
                          <Typography variant="body2" sx={{ color: '#333333' }}>
                            {trait.description}
                          </Typography>
                        </Box>
                      </Box>
                    ))}
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>
        </Grid>
      </motion.div>
    </Container>
  );
}

export default FinalSummary;
